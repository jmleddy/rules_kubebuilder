import requests
import os
from dataclasses import dataclass
from tqdm import tqdm
from typing import List
import base64
import json
import yaml


@dataclass
class ReleaseItem:
    version: str
    linux_amd64_checksum: str
    darwin_amd64_checksum: str
    darwin_arm64_checksum: str


def main():
    items = fetch_release_items()
    generate_sdk_list(items)


def fetch_release_items():
    if "GH_ACCESS_TOKEN" not in os.environ:
        print("You need to get an access token following the instructions in \n https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/creating-a-personal-access-token")
        exit(1)
    access_token = os.getenv("GH_ACCESS_TOKEN")
    releases_response = requests.get('https://api.github.com/repos/kubernetes-sigs/controller-tools/contents/envtest-releases.yaml', headers={
        "Accept": "application/vnd.github.raw+json",
        "Authorization": f"token {access_token}"
    })

    releases_response = releases_response.content.decode("utf-8")
    releases_response = yaml.safe_load(releases_response)

    items = []
    for version, tarball in releases_response["releases"].items():
        linux_amd64_key = ""
        darwin_amd64_key = ""
        darwin_arm64_key = ""

        for name, val in tarball.items():
            if name.endswith("linux-amd64.tar.gz"):
                linux_amd64_key = checksum_text_to_integrity(val["hash"])
            if name.endswith("darwin-amd64.tar.gz"):
                darwin_amd64_key = checksum_text_to_integrity(val["hash"])
            if name.endswith("darwin-arm64.tar.gz"):
                darwin_arm64_key = checksum_text_to_integrity(val["hash"])

        if darwin_arm64_key:
            items.append(ReleaseItem(
                version, linux_amd64_key, darwin_amd64_key, darwin_arm64_key))
        else:
            items.append(ReleaseItem(
                version, linux_amd64_key, darwin_amd64_key, None))

    return items


def generate_sdk_list(items: List[ReleaseItem]):
    result = """## Useful constants. Generated by generate_sdk_list.py

DEFAULT_VERSION = "1.30.0"

SDK_VERSION_INTEGRITY = {
"""
    sdk_dic = {}
    for item in items:
        if item.darwin_arm64_checksum:
            sdk_dic[item.version.replace("v","")] = {
                "linux-amd64": item.linux_amd64_checksum,
                "darwin-amd64": item.darwin_amd64_checksum,
                "darwin-arm64": item.darwin_arm64_checksum,
            }
        else:
            sdk_dic[item.version.replace("v","")] = {
                "linux-amd64": item.linux_amd64_checksum,
                "darwin-amd64": item.darwin_amd64_checksum,
            }
    result += remove_first_line(json.dumps(sdk_dic, indent=4))
    with open("sdk_list.bzl", "w") as f:
        f.write(result)
    print("output: sdk_list.bzl")


def checksum_text_to_integrity(text):
    encoding = base64.b64encode(bytes.fromhex(text))
    return "sha512-" + encoding.decode('ascii')

def get_key_containing(keys, word):
    cands = [key for key in keys if word in key]
    if len(cands) == 1:
        return cands[0]
    return ""


def remove_first_line(text):
    tmp = text.split("\n")
    return "\n".join(tmp[1:])


if __name__ == "__main__":
    main()
